generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(uuid()) @db.Char(36)
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  // orders    Order[]
  createdAt DateTime @default(now())
}

enum Language {
  EN @map("en") // English
  AR @map("ar") // Arabic
}

model Category {
  id           String                @id @default(uuid()) @db.Char(36)
  name         String                @unique
  imageUrl     String?
  translations CategoryTranslation[]
  products     Product[]
  createdAt    DateTime              @default(now())
}

model CategoryTranslation {
  id          String   @id @default(uuid()) @db.Char(36)
  name        String
  description String?
  language    Language
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String   @db.Char(36)

  @@unique([categoryId, language])
}

model Product {
  id           String               @id @default(uuid()) @db.Char(36)
  price        Float
  discount     Float?
  stock        Int                  @default(0)
  weight       Float                @default(0.0) // in kg
  images       ProductImage[]       // Multiple images per product
  rank         Int?
  category     Category?            @relation(fields: [categoryId], references: [id])
  categoryId   String?              @db.Char(36)
  orderItems   OrderItem[]
  translations ProductTranslation[]
  offers       Ad[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  Coupon       Coupon[]

  DiscountedProduct DiscountedProduct[]
}

model ProductImage {
  id        String   @id @default(uuid()) @db.Char(36)
  url       String
  isPrimary Boolean  @default(false)
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.Char(36)
  createdAt DateTime @default(now())
  
  @@index([productId])
}

model ProductTranslation {
  id           String   @id @default(uuid()) @db.Char(36)
  name         String
  description  String?
  color        String?
  manufacturer String?
  language     Language
  product      Product  @relation(fields: [productId], references: [id])
  productId    String   @db.Char(36)

  @@unique([productId, language])
}

model Order {
  id                String      @id @default(uuid()) @db.Char(36)
  orderItems        OrderItem[]
  totalPrice        Float
  totalFee          Float       @default(0.0)
  status            String      @default("pending") // pending, processing, shipped, delivered, cancelled
  province          Province?    @relation(fields: [provinceId], references: [id])
  provinceId        String?     @db.Char(36)
  city              String
  address           String
  
  phoneNumber       String
  secondPhoneNumber String?
  userFirstName     String
  userLastName      String
  createdAt         DateTime    @default(now())
}

model OrderItem {
  id        String   @id @default(uuid()) @db.Char(36)
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @db.Char(36)
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.Char(36)
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
}

model Province {
  id           String                @id @default(uuid()) @db.Char(36)
  // code         String                @unique
  translations ProvinceTranslation[]
  deliveryFees DeliveryFee[]
  orders       Order[]
  offers       Ad[]
  createdAt    DateTime              @default(now())
}

model ProvinceTranslation {
  id         String   @id @default(uuid()) @db.Char(36)
  name       String
  language   Language
  province   Province @relation(fields: [provinceId], references: [id])
  provinceId String   @db.Char(36)

  @@unique([provinceId, language])
}

model DeliveryFee {
  id         String  @id @default(uuid()) @db.Char(36)
  minWeight  Float    @default(1.0) // in kg
  maxWeight  Float? 
  baseFee    Float   @default(70.0)
  additionalFeePerKg Float @default(7.0)
  feePerKg   Float
  province   Province @relation(fields: [provinceId], references: [id])
  provinceId String   @db.Char(36)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())

  @@unique([provinceId, minWeight, maxWeight])
}

model Ad {
  id            String    @id @default(uuid()) @db.Char(36)
  title         String?   @db.VarChar(255)
  description   String?   @db.Text
  isActive      Boolean   @default(false)
  isFeatured    Boolean   @default(false)
  discountType  String?   @default("PERCENT") // "PERCENT" or "FIXED"
  discountValue Float? // percentage or fixed amount
  startDate     DateTime  @default(now())
  endDate       DateTime?

  product    Product?  @relation(fields: [productId], references: [id])
  productId  String?   @db.Char(36)
  province   Province? @relation(fields: [provinceId], references: [id])
  provinceId String?   @db.Char(36)

  // Timestamps
  createdAt DateTime @default(now())
  // Indexes
  @@index([isActive])
  @@index([startDate, endDate])

}

model Coupon {
  id             String    @id @default(uuid()) @db.Char(36)
  code           String    @unique
  discount       Float
  type           String    @default("PERCENT") // "PERCENT" or "FIXED"
  validFrom      DateTime?
  validTo        DateTime?
  isActive       Boolean   @default(false)
  maxUses        Int?      @default(1)
  usedCount      Int       @default(0)  
  createdAt      DateTime  @default(now())
  usages        CouponUsage[]
  Product       Product[]

  DiscountedProduct DiscountedProduct[]
}

model DiscountedProduct {
  id            String   @id @default(uuid()) @db.Char(36)
  productId     String   @db.Char(36)
  product    Product?  @relation(fields: [productId], references: [id])

  originalPrice Float
  discountPrice Float
  coupon        Coupon   @relation(fields: [couponId], references: [id])
  couponId      String   @db.Char(36)
  deviceId      String   @db.VarChar(255)
  expiresAt     DateTime
  createdAt     DateTime @default(now())

  @@unique([productId, couponId, deviceId])
  CouponUsage CouponUsage[]
}

model CouponUsage {
  id        String   @id @default(uuid()) @db.Char(36)
  coupon    Coupon   @relation(fields: [couponId], references: [id])
  couponId  String   @db.Char(36)
  deviceId  String   @db.VarChar(255)
  usedAt    DateTime @default(now())
  expiresAt DateTime @default(now())
  discountedProducts DiscountedProduct[]

  @@unique([couponId, deviceId])
}